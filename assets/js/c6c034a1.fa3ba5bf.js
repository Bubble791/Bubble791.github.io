"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9354],{55:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>f,toc:()=>g});var s=r(4848),t=r(8453);const i={},a=void 0,f={id:"gba/fixbug/\u79fb\u9664\u7cbe\u7075\u4fe1\u606f\u754c\u9762\u7684\u90e8\u5206\u5185\u5b58\u5360\u7528",title:"\u79fb\u9664\u7cbe\u7075\u4fe1\u606f\u754c\u9762\u7684\u90e8\u5206\u5185\u5b58\u5360\u7528",description:"The summary screen in RSE is surprisingly wasteful, which for Castform in particular has it so all forms are loaded in memory, despite only using 1. This tweak will fix it so it's more optimized",source:"@site/docs/gba/fixbug/\u79fb\u9664\u7cbe\u7075\u4fe1\u606f\u754c\u9762\u7684\u90e8\u5206\u5185\u5b58\u5360\u7528.md",sourceDirName:"gba/fixbug",slug:"/gba/fixbug/\u79fb\u9664\u7cbe\u7075\u4fe1\u606f\u754c\u9762\u7684\u90e8\u5206\u5185\u5b58\u5360\u7528",permalink:"/docs/gba/fixbug/\u79fb\u9664\u7cbe\u7075\u4fe1\u606f\u754c\u9762\u7684\u90e8\u5206\u5185\u5b58\u5360\u7528",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"gbaTutor",previous:{title:"\u539f\u7248BUG\u4fee\u590d",permalink:"/docs/category/\u539f\u7248bug\u4fee\u590d"}},o={},g=[];function l(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The summary screen in RSE is surprisingly wasteful, which for Castform in particular has it so all forms are loaded in memory, despite only using 1. This tweak will fix it so it's more optimized"}),"\n",(0,s.jsx)(n.p,{children:"Thanks to ShinyDragonHunter for this"}),"\n",(0,s.jsx)(n.p,{children:"First, we'll set up this struct in src/pokemon.c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"- EWRAM_DATA static struct MonSpritesGfxManager *sMonSpritesGfxManagers[MON_SPR_GFX_MANAGERS_COUNT] = {NULL};\n+ EWRAM_DATA static struct MonSpritesGfxManager *sMonSpritesGfxManager = NULL;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, we'll set up ",(0,s.jsx)(n.strong,{children:"InitMonSpritesGfx_Battle"})," function near bottom to do the following"]}),"\n",(0,s.jsx)(n.p,{children:"Change this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void SetMultiuseSpriteTemplateToPokemon(u16 speciesTag, u8 battlerPosition)\n{\n    if (gMonSpritesGfxPtr != NULL)\n        gMultiuseSpriteTemplate = gMonSpritesGfxPtr->templates[battlerPosition];\n    else if (sMonSpritesGfxManagers[MON_SPR_GFX_MANAGER_A])\n        gMultiuseSpriteTemplate = sMonSpritesGfxManagers[MON_SPR_GFX_MANAGER_A]->templates[battlerPosition];\n    else if (sMonSpritesGfxManagers[MON_SPR_GFX_MANAGER_B])\n        gMultiuseSpriteTemplate = sMonSpritesGfxManagers[MON_SPR_GFX_MANAGER_B]->templates[battlerPosition];\n    else\n        gMultiuseSpriteTemplate = gBattlerSpriteTemplates[battlerPosition];\n"})}),"\n",(0,s.jsx)(n.p,{children:"To"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void SetMultiuseSpriteTemplateToPokemon(u16 speciesTag, u8 battlerPosition)\n{\n    if (gMonSpritesGfxPtr != NULL)\n        gMultiuseSpriteTemplate = gMonSpritesGfxPtr->templates[battlerPosition];\n    else if (sMonSpritesGfxManager)\n        gMultiuseSpriteTemplate = sMonSpritesGfxManager->templates[battlerPosition];\n"})}),"\n",(0,s.jsx)(n.p,{children:"Change the integer to a u32 (current version)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"static void InitMonSpritesGfx_Battle(struct MonSpritesGfxManager* gfx)\n{\n-    u16 i, j;\n+    u32 i, j; \n    for (i = 0; i < gfx->numSprites; i++)\n    {\n        gfx->templates[i] = gBattlerSpriteTemplates[i];\n        for (j = 0; j < gfx->numFrames; j++)\n            gfx->frameImages[i * gfx->numFrames + j].data = &gfx->spritePointers[i][j * MON_PIC_SIZE];\n \n        gfx->templates[i].images = &gfx->frameImages[i * gfx->numFrames];\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Next, in the struct below it (this is big) change"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct MonSpritesGfxManager *CreateMonSpritesGfxManager(u8 managerId, u8 mode)\n{\n    u8 i;\n    u8 failureFlags;\n    struct MonSpritesGfxManager *gfx;\n\n    failureFlags = 0;\n    managerId %= MON_SPR_GFX_MANAGERS_COUNT;\n    gfx = AllocZeroed(sizeof(*gfx));\n    if (gfx == NULL)\n        return NULL;\n\n    switch (mode)\n    {\n    case MON_SPR_GFX_MODE_FULL_PARTY:\n        gfx->numSprites = PARTY_SIZE + 1;\n        gfx->numSprites2 = PARTY_SIZE + 1;\n        gfx->numFrames = GFX_MANAGER_NUM_FRAMES;\n        gfx->dataSize = 1;\n        gfx->mode = MON_SPR_GFX_MODE_FULL_PARTY;\n        break;\n // case MON_SPR_GFX_MODE_BATTLE:       \n    case MON_SPR_GFX_MODE_NORMAL:\n    default:\n        gfx->numSprites = MAX_BATTLERS_COUNT;\n        gfx->numSprites2 = MAX_BATTLERS_COUNT;\n        gfx->numFrames = GFX_MANAGER_NUM_FRAMES;\n        gfx->dataSize = 1;\n        gfx->mode = MON_SPR_GFX_MODE_NORMAL;\n        break;\n    }\n\n    // Set up sprite / sprite pointer buffers\n    gfx->spriteBuffer = AllocZeroed(gfx->dataSize * GFX_MANAGER_SPR_SIZE * gfx->numSprites);\n    gfx->spritePointers = AllocZeroed(gfx->numSprites * 32); // ? Only * 4 is necessary, perhaps they were thinking bits.\n    if (gfx->spriteBuffer == NULL || gfx->spritePointers == NULL)\n    {\n        failureFlags |= ALLOC_FAIL_BUFFER;\n    }\n    else\n    {\n        for (i = 0; i < gfx->numSprites; i++)\n            gfx->spritePointers[i] = gfx->spriteBuffer + (gfx->dataSize * GFX_MANAGER_SPR_SIZE * i);\n    }\n\n    // Set up sprite structs\n    gfx->templates = AllocZeroed(sizeof(struct SpriteTemplate) * gfx->numSprites);\n    gfx->frameImages = AllocZeroed(sizeof(struct SpriteFrameImage) * gfx->numSprites * gfx->numFrames);\n    if (gfx->templates == NULL || gfx->frameImages == NULL)\n    {\n        failureFlags |= ALLOC_FAIL_STRUCT;\n    }\n    else\n    {\n        for (i = 0; i < gfx->numFrames * gfx->numSprites; i++)\n            gfx->frameImages[i].size = MON_PIC_SIZE;\n\n        switch (gfx->mode)\n        {\n        case MON_SPR_GFX_MODE_FULL_PARTY:\n            InitMonSpritesGfx_FullParty(gfx);\n            break;\n        case MON_SPR_GFX_MODE_NORMAL:\n        case MON_SPR_GFX_MODE_BATTLE:\n        default:\n            InitMonSpritesGfx_Battle(gfx);\n            break;\n        }\n    }\n\n    // If either of the allocations failed free their respective members\n    if (failureFlags & ALLOC_FAIL_STRUCT)\n    {\n        TRY_FREE_AND_SET_NULL(gfx->frameImages);\n        TRY_FREE_AND_SET_NULL(gfx->templates);\n    }\n    if (failureFlags & ALLOC_FAIL_BUFFER)\n    {\n        TRY_FREE_AND_SET_NULL(gfx->spritePointers);\n        TRY_FREE_AND_SET_NULL(gfx->spriteBuffer);\n    }\n\n    if (failureFlags)\n    {\n        // Clear, something failed to allocate\n        memset(gfx, 0, sizeof(*gfx));\n        Free(gfx);\n    }\n    else\n    {\n        gfx->active = GFX_MANAGER_ACTIVE;\n        sMonSpritesGfxManagers[managerId] = gfx;\n    }\n\n    return sMonSpritesGfxManagers[managerId];\n} \n"})}),"\n",(0,s.jsx)(n.p,{children:"To"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct MonSpritesGfxManager *CreateMonSpritesGfxManager(void)\n{\n    u32 i;\n    u8 failureFlags;\n    struct MonSpritesGfxManager *gfx;\n \n    failureFlags = 0;\n    gfx = AllocZeroed(sizeof(*gfx));\n    if (gfx == NULL)\n        return NULL;\n \n    gfx->numSprites = MAX_BATTLERS_COUNT;\n    gfx->numFrames = GFX_MANAGER_NUM_FRAMES;\n    gfx->spriteBuffer = AllocZeroed(GFX_MANAGER_SPR_SIZE * gfx->numSprites);\n    gfx->spritePointers = AllocZeroed(gfx->numSprites * 4);\n    if (gfx->spriteBuffer == NULL || gfx->spritePointers == NULL)\n    {\n        failureFlags |= ALLOC_FAIL_BUFFER;\n    }\n    else\n    {\n        for (i = 0; i < gfx->numSprites; i++)\n            gfx->spritePointers[i] = gfx->spriteBuffer + (GFX_MANAGER_SPR_SIZE * i);\n    }\n \n    // Set up sprite structs\n    gfx->templates = AllocZeroed(sizeof(struct SpriteTemplate) * gfx->numSprites);\n    gfx->frameImages = AllocZeroed(sizeof(struct SpriteFrameImage) * gfx->numSprites * gfx->numFrames);\n    if (gfx->templates == NULL || gfx->frameImages == NULL)\n    {\n        failureFlags |= ALLOC_FAIL_STRUCT;\n    }\n    else\n    {\n        for (i = 0; i < gfx->numFrames * gfx->numSprites; i++)\n            gfx->frameImages[i].size = MON_PIC_SIZE;\n        InitMonSpritesGfx_Battle(gfx);\n    }\n \n    // If either of the allocations failed free their respective members\n    if (failureFlags & ALLOC_FAIL_STRUCT)\n    {\n        TRY_FREE_AND_SET_NULL(gfx->frameImages);\n        TRY_FREE_AND_SET_NULL(gfx->templates);\n    }\n    if (failureFlags & ALLOC_FAIL_BUFFER)\n    {\n        TRY_FREE_AND_SET_NULL(gfx->spritePointers);\n        TRY_FREE_AND_SET_NULL(gfx->spriteBuffer);\n    }\n \n    if (failureFlags)\n    {\n        // Clear, something failed to allocate\n        memset(gfx, 0, sizeof(*gfx));\n        Free(gfx);\n    }\n    else\n    {\n        gfx->active = TRUE;\n        sMonSpritesGfxManager = gfx;\n    }\n \n    return sMonSpritesGfxManager;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void DestroyMonSpritesGfxManager(u8 managerId)\n{\n    struct MonSpritesGfxManager *gfx;\n\n    managerId %= MON_SPR_GFX_MANAGERS_COUNT;\n    gfx = sMonSpritesGfxManagers[managerId];\n    if (gfx == NULL)\n        return;\n\n    if (gfx->active != GFX_MANAGER_ACTIVE)\n    {\n        memset(gfx, 0, sizeof(*gfx));\n    }\n    else\n    {\n        TRY_FREE_AND_SET_NULL(gfx->frameImages);\n        TRY_FREE_AND_SET_NULL(gfx->templates);\n        TRY_FREE_AND_SET_NULL(gfx->spritePointers);\n        TRY_FREE_AND_SET_NULL(gfx->spriteBuffer);\n        memset(gfx, 0, sizeof(*gfx));\n        Free(gfx);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"To"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void DestroyMonSpritesGfxManager(void)\n{\n    struct MonSpritesGfxManager *gfx = sMonSpritesGfxManager;\n \n    if (gfx == NULL)\n        return;\n \n    if (gfx->active)\n    {\n        TRY_FREE_AND_SET_NULL(gfx->frameImages);\n        TRY_FREE_AND_SET_NULL(gfx->templates);\n        TRY_FREE_AND_SET_NULL(gfx->spritePointers);\n        TRY_FREE_AND_SET_NULL(gfx->spriteBuffer);\n        memset(gfx, 0, sizeof(*gfx));\n        Free(gfx);\n    }\n    else\n        memset(gfx, 0, sizeof(*gfx));\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"And finally, this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"u8 *MonSpritesGfxManager_GetSpritePtr(u8 managerId, u8 spriteNum)\n{\n    struct MonSpritesGfxManager *gfx = sMonSpritesGfxManagers[managerId % MON_SPR_GFX_MANAGERS_COUNT];\n    if (gfx->active != GFX_MANAGER_ACTIVE)\n    {\n        return NULL;\n    }\n    else\n    {\n        if (spriteNum >= gfx->numSprites)\n            spriteNum = 0;\n\n        return gfx->spritePointers[spriteNum];\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"To this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"u8 *MonSpritesGfxManager_GetSpritePtr(u8 spriteNum)\n{\n    struct MonSpritesGfxManager *gfx = sMonSpritesGfxManager;\n \n    if (gfx->active)\n    {\n        if (spriteNum >= gfx->numSprites)\n            spriteNum = 0;\n \n        return gfx->spritePointers[spriteNum];\n    }\n    return NULL;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"After all that, head on to include/pokemon.h to reduce this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct MonSpritesGfxManager\n{\n    u32 numSprites:4;\n    u32 numSprites2:4; // Never read\n    u32 numFrames:8;\n    u32 active:8;\n    u32 dataSize:4;\n    u32 mode:4; // MON_SPR_GFX_MODE_*\n    void *spriteBuffer;\n    u8 **spritePointers;\n    struct SpriteTemplate *templates;\n    struct SpriteFrameImage *frameImages;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"To this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct MonSpritesGfxManager\n{\n    u8 numSprites;\n    u8 numFrames;\n    bool16 active;\n    void *spriteBuffer;\n    u8 **spritePointers;\n    struct SpriteTemplate *templates;\n    struct SpriteFrameImage *frameImages;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"And then the void changes of these"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"- struct MonSpritesGfxManager *CreateMonSpritesGfxManager(u8 managerId, u8 mode);\n- void DestroyMonSpritesGfxManager(u8 managerId);\n- u8 *MonSpritesGfxManager_GetSpritePtr(u8 managerId, u8 spriteNum);\n+ struct MonSpritesGfxManager *CreateMonSpritesGfxManager(void);\n+ void DestroyMonSpritesGfxManager(void);\n+ u8 *MonSpritesGfxManager_GetSpritePtr(u8 spriteNum);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Along with in src/pokemon_summary_screen.c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"    if (gMonSpritesGfxPtr == NULL)\n-        CreateMonSpritesGfxManager(MON_SPR_GFX_MANAGER_A, MON_SPR_GFX_MODE_NORMAL);\n+        CreateMonSpritesGfxManager();\n"})}),"\n",(0,s.jsx)(n.p,{children:"and"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"static void CloseSummaryScreen(u8 taskId)\n{\n    if (MenuHelpers_CallLinkSomething() != TRUE && !gPaletteFade.active)\n    {\n        SetMainCallback2(sMonSummaryScreen->callback);\n        gLastViewedMonIndex = sMonSummaryScreen->curMonIndex;\n        SummaryScreen_DestroyAnimDelayTask();\n        ResetSpriteData();\n        FreeAllSpritePalettes();\n        StopCryAndClearCrySongs();\n        m4aMPlayVolumeControl(&gMPlayInfo_BGM, 0xFFFF, 0x100);\n        if (gMonSpritesGfxPtr == NULL)\n-            DestroyMonSpritesGfxManager(MON_SPR_GFX_MANAGER_A);\n+            DestroyMonSpritesGfxManager();\n        FreeSummaryScreen();\n        DestroyTask(taskId);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And in ",(0,s.jsx)(n.strong,{children:"static u8 LoadMonGfxAndSprite"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"                if (sMonSummaryScreen->monList.mons == gPlayerParty || sMonSummaryScreen->mode == SUMMARY_MODE_BOX || sMonSummaryScreen->unk40EF == TRUE)\n                    HandleLoadSpecialPokePic_2(&gMonFrontPicTable[summary->species2],\n-                                                MonSpritesGfxManager_GetSpritePtr(MON_SPR_GFX_MANAGER_A, B_POSITION_OPPONENT_LEFT),\n+                                                MonSpritesGfxManager_GetSpritePtr(B_POSITION_OPPONENT_LEFT),\n                                                summary->species2,\n                                                summary->pid);\n                else\n                    HandleLoadSpecialPokePic_DontHandleDeoxys(&gMonFrontPicTable[summary->species2],\n-                                                              MonSpritesGfxManager_GetSpritePtr(MON_SPR_GFX_MANAGER_A, B_POSITION_OPPONENT_LEFT),\n+                                                              MonSpritesGfxManager_GetSpritePtr(B_POSITION_OPPONENT_LEFT),\n                                                              summary->species2,\n                                                              summary->pid);\n"})}),"\n",(0,s.jsx)(n.p,{children:"With all this set, you can edit the frames used on the summary screen to whatever you want"}),"\n",(0,s.jsx)(n.p,{children:"Going back to src/pokemon.c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"#define ALLOC_FAIL_BUFFER (1 << 0)\n#define ALLOC_FAIL_STRUCT (1 << 1)\n#define GFX_MANAGER_ACTIVE 0xA3 // Arbitrary value\n#define GFX_MANAGER_SPR_SIZE (MON_PIC_SIZE * 4) // * 4 is unnecessary, MON_PIC_SIZE is sufficient\n#define GFX_MANAGER_NUM_FRAMES 4  // Only 2 frames are needed \n"})}),"\n",(0,s.jsxs)(n.p,{children:["Change ",(0,s.jsx)(n.code,{children:"#define GFX_MANAGER_NUM_FRAMES 4"})," to whatever value you want. 2 is typically preferred"]}),"\n",(0,s.jsxs)(n.p,{children:["If you're crazy enough to add more Castform forms later, ",(0,s.jsx)(n.code,{children:"#define GFX_MANAGER_SPR_SIZE (MON_PIC_SIZE * 4)"})," will need to be increased to compensate added forms"]}),"\n",(0,s.jsx)(n.p,{children:"Otherwise"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"- #define GFX_MANAGER_NUM_FRAMES 4\n+ #define GFX_MANAGER_NUM_FRAMES 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"And you're done"})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>f});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function f(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);